@256
D=A
@SP
M=D
@$CallReturn0
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@0
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
($CallReturn0)
// Main.vm ------------------------------------------------------------
//  This file is part of www.nand2tetris.org
//  and the book "The Elements of Computing Systems"
//  by Nisan and Schocken, MIT Press.
//  File name: projects/08/FunctionCalls/FibonacciElement/Main.vm
//  Computes the n'th element of the Fibonacci series, recursively.
//  n is given in argument[0].  Called by the Sys.init function 
//  (part of the Sys.vm file), which also pushes the argument[0] 
//  parameter before this code starts running.
// function Main.fibonacci 0
(Main.fibonacci)
@0
D=A
@13
M=D
(Main.fibonacci$$initStart)
@13
D=M
@Main.fibonacci$$initEnd
D;JEQ
D=D-1
@13
M=D
D=0
@SP
A=M
M=D
@SP
M=M+1
@Main.fibonacci$$initStart
0;JMP
(Main.fibonacci$$initEnd)
// push argument 0
@ARG
A=M
D=A
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
//  checks if n<2
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@$CompJump0True
D;JLT
@$CompJump0False
0;JMP
($CompJump0False)
@0
D=A
@$CompJump0End
0;JMP
($CompJump0True)
@0
D=A-1
($CompJump0End)
@SP
A=M
M=D
@SP
M=M+1
// if-goto IF_TRUE
@SP
M=M-1
A=M
D=M
@Main.fibonacci$IF_TRUE
D;JNE
// goto IF_FALSE
@Main.fibonacci$IF_FALSE
0;JMP
//  if n<2, return n
// label IF_TRUE
(Main.fibonacci$IF_TRUE)
// push argument 0
@ARG
A=M
D=A
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@13
M=D
@5
A=D-A
D=M
@14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@13
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@13
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@13
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@13
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@14
A=M
0;JMP
//  if n>=2, returns fib(n-2)+fib(n-1)
// label IF_FALSE
(Main.fibonacci$IF_FALSE)
// push argument 0
@ARG
A=M
D=A
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
//  computes fib(n-2)
// call Main.fibonacci 1
@$CallReturn1
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
($CallReturn1)
// push argument 0
@ARG
A=M
D=A
@0
A=D+A
D=M
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
//  computes fib(n-1)
// call Main.fibonacci 1
@$CallReturn2
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
($CallReturn2)
//  returns fib(n-1) + fib(n-2)
// add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D+M
@SP
A=M
M=D
@SP
M=M+1
// return
@LCL
D=M
@13
M=D
@5
A=D-A
D=M
@14
M=D
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
@ARG
D=M+1
@SP
M=D
@13
D=M
@1
D=D-A
A=D
D=M
@THAT
M=D
@13
D=M
@2
D=D-A
A=D
D=M
@THIS
M=D
@13
D=M
@3
D=D-A
A=D
D=M
@ARG
M=D
@13
D=M
@4
D=D-A
A=D
D=M
@LCL
M=D
@14
A=M
0;JMP
// Sys.vm ------------------------------------------------------------
//  This file is part of www.nand2tetris.org
//  and the book "The Elements of Computing Systems"
//  by Nisan and Schocken, MIT Press.
//  File name: projects/08/FunctionCalls/FibonacciElement/Sys.vm
//  Pushes a constant, say n, onto the stack, and calls the Main.fibonacii
//  function, which computes the n'th element of the Fibonacci series.
//  Note that by convention, the Sys.init function is called "automatically" 
//  by the bootstrap code.
// function Sys.init 0
(Sys.init)
@0
D=A
@13
M=D
(Sys.init$$initStart)
@13
D=M
@Sys.init$$initEnd
D;JEQ
D=D-1
@13
M=D
D=0
@SP
A=M
M=D
@SP
M=M+1
@Sys.init$$initStart
0;JMP
(Sys.init$$initEnd)
// push constant 4
@4
D=A
@SP
A=M
M=D
@SP
M=M+1
//  computes the 4'th fibonacci element
// call Main.fibonacci 1
@$CallReturn3
D=A
@SP
A=M
M=D
@SP
M=M+1
@LCL
D=M
@SP
A=M
M=D
@SP
M=M+1
@ARG
D=M
@SP
A=M
M=D
@SP
M=M+1
@THIS
D=M
@SP
A=M
M=D
@SP
M=M+1
@THAT
D=M
@SP
A=M
M=D
@SP
M=M+1
@SP
D=M
@1
D=D-A
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.fibonacci
0;JMP
($CallReturn3)
// label WHILE
(Sys.init$WHILE)
//  loops infinitely
// goto WHILE
@Sys.init$WHILE
0;JMP
