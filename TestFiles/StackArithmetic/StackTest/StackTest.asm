// StackTest.vm ------------------------------------------------------------
//  This file is part of www.nand2tetris.org
//  and the book "The Elements of Computing Systems"
//  by Nisan and Schocken, MIT Press.
//  File name: projects/07/StackArithmetic/StackTest/StackTest.vm
//  Executes a sequence of arithmetic and logical operations
//  on the stack. 
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump0True
D;JEQ
@CompJump0False
0;JMP
(CompJump0False)
@0
D=A
@CompJump0End
0;JMP
(CompJump0True)
@0
D=A-1
(CompJump0End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump1True
D;JEQ
@CompJump1False
0;JMP
(CompJump1False)
@0
D=A
@CompJump1End
0;JMP
(CompJump1True)
@0
D=A-1
(CompJump1End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump2True
D;JEQ
@CompJump2False
0;JMP
(CompJump2False)
@0
D=A
@CompJump2End
0;JMP
(CompJump2True)
@0
D=A-1
(CompJump2End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump3True
D;JLT
@CompJump3False
0;JMP
(CompJump3False)
@0
D=A
@CompJump3End
0;JMP
(CompJump3True)
@0
D=A-1
(CompJump3End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump4True
D;JLT
@CompJump4False
0;JMP
(CompJump4False)
@0
D=A
@CompJump4End
0;JMP
(CompJump4True)
@0
D=A-1
(CompJump4End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
// lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump5True
D;JLT
@CompJump5False
0;JMP
(CompJump5False)
@0
D=A
@CompJump5End
0;JMP
(CompJump5True)
@0
D=A-1
(CompJump5End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump6True
D;JGT
@CompJump6False
0;JMP
(CompJump6False)
@0
D=A
@CompJump6End
0;JMP
(CompJump6True)
@0
D=A-1
(CompJump6End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump7True
D;JGT
@CompJump7False
0;JMP
(CompJump7False)
@0
D=A
@CompJump7End
0;JMP
(CompJump7True)
@0
D=A-1
(CompJump7End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
// gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@CompJump8True
D;JGT
@CompJump8False
0;JMP
(CompJump8False)
@0
D=A
@CompJump8End
0;JMP
(CompJump8True)
@0
D=A-1
(CompJump8End)
@SP
A=M
M=D
@SP
M=M+1
// push constant 57
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 53
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
// add
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D+M
@SP
A=M
M=D
@SP
M=M+1
// push constant 112
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
// sub
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@SP
A=M
M=D
@SP
M=M+1
// neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1
// and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D&M
@SP
A=M
M=D
@SP
M=M+1
// push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
// or
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D|M
@SP
A=M
M=D
@SP
M=M+1
// not
@SP
M=M-1
A=M
M=!M
@SP
M=M+1